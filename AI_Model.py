# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JkVsG-wnO7gOwHOQC7sENlP0t07zK6NV
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.feature_selection import SelectKBest, f_classif
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score
from imblearn.over_sampling import RandomOverSampler
import joblib

df = pd.read_excel('C:\Users\DOOTCOM.COM\Desktop\Mohamed\الشركات (1).xlsx')
df.head()

# تحويل النسب المئوية لأرقام عشرية
percent_cols = ['صافي الربح', 'العائد على الأصول ROA',
                'العائد على حقوق الملكية ROI']
for col in percent_cols:
    df[col] = df[col].astype(str).str.rstrip('%').astype(float) / 100

# تعويض القيم المفقودة بالوسيط
df.fillna(df.median(numeric_only=True), inplace=True)

# تحويل التصنيف لقيم رقمية
label_encoder = LabelEncoder()
df['التصنيف_رقمي'] = label_encoder.fit_transform(df['التصنيف'])
y = df['التصنيف_رقمي']

numeric_cols = df.select_dtypes(
    include=[np.number]).columns.drop(['التصنيف_رقمي'])
scaler = StandardScaler()
X = scaler.fit_transform(df[numeric_cols])

selector = SelectKBest(score_func=f_classif, k=8)
X_selected = selector.fit_transform(X, y)

ros = RandomOverSampler(random_state=42)
X_resampled, y_resampled = ros.fit_resample(X_selected, y)

X_train, X_test, y_train, y_test = train_test_split(
    X_resampled, y_resampled, test_size=0.2, random_state=42, stratify=y_resampled
)

model = XGBClassifier(
    objective='multi:softmax',
    num_classes=len(np.unique(y_train)),
    n_estimators=200,
    max_depth=5,
    learning_rate=0.05,
    eval_metric='merror'
)

model.fit(X_train, y_train)

y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.2f}")

selected_features = np.array(numeric_cols)[selector.get_support()]
print("Selected Features:", selected_features)

joblib.dump(model, 'xgb_model.pkl')
joblib.dump(selector, 'selector.pkl')
joblib.dump(scaler, 'scaler.pkl')
joblib.dump(label_encoder, 'label_encoder.pkl')
